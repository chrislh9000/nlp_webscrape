export default StorageManager;
/**
 * @template T
 * StorageManager takes care of opening remote or local storages.
 * @property {Function} StorageConstructor
 * @property {string} name
 * @property {LruCache} cache
 * @ignore
 */
declare class StorageManager<T> {
    /**
     * @param {T} StorageConstructor
     */
    constructor(StorageConstructor: T);
    StorageConstructor: T;
    name: any;
    cache: any;
    /**
     * @param {string} idOrName
     * @param {object} [options]
     * @param {boolean} [options.forceCloud]
     * @return {Promise<T>}
     */
    openStorage(idOrName: string, options?: {
        forceCloud?: boolean;
    } | undefined): Promise<T>;
    /**
     * @param {object} storage
     * @param {string} storage.id
     * @param {string} [storage.name]
     * @param {boolean} [storage.isLocal]
     */
    closeStorage(storage: {
        id: string;
        name?: string;
        isLocal?: boolean;
    }): void;
    /**
     * @param {string} idOrName
     * @param {boolean} isLocal
     * @return {string}
     * @ignore
     * @protected
     * @internal
     */
    protected _createCacheKey(idOrName: string, isLocal: boolean): string;
    /**
     * Helper function that first requests storage by ID and if storage doesn't exist then gets it by name.
     * @param {string} storageIdOrName
     * @param {string} storageConstructorName
     * @param {ApifyClient|ApifyStorageLocal} apiClient
     * @ignore
     * @protected
     * @internal
     */
    protected _getOrCreateStorage(storageIdOrName: string, storageConstructorName: string, apiClient: any): Promise<any>;
    /**
     * @param {ApifyClient|ApifyStorageLocal} client
     * @param {string} storageConstructorName
     * @ignore
     * @protected
     * @internal
     */
    protected _getStorageClientFactories(client: any, storageConstructorName: string): {
        createStorageClient: any;
        createStorageCollectionClient: any;
    };
    /**
     * @param {object} storage
     * @param {string} storage.id
     * @param {string} [storage.name]
     * @param {boolean} [storage.isLocal]
     * @ignore
     * @protected
     * @internal
     */
    protected _addStorageToCache(storage: {
        id: string;
        name?: string;
        isLocal?: boolean;
    }): void;
}
