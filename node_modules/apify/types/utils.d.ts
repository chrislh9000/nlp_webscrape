/// <reference types="node" />
export function newClient(options?: {
    token?: string;
    maxRetries?: string;
    minDelayBetweenRetriesMillis?: string;
} | undefined): any;
export function newStorageLocal(options?: object | undefined): any;
export function logSystemInfo(): void;
/**
 * The default instance of `ApifyClient` used internally
 * by the SDK.
 *
 * @type {*}
 * @ignore
 */
export const apifyClient: any;
/**
 * The default instance of the `ApifyStorageLocal` class.
 * The instance is created automatically by the Apify SDK and it is configured using the
 * `APIFY_LOCAL_STORAGE_DIR` environment variable.
 *
 * The instance is lazy loaded and used for local emulation of calls to the Apify API
 * in Apify Storages such as {@link RequestQueue}.
 *
 * @type {*}
 * @ignore
 */
export const apifyStorageLocal: any;
export function addCharsetToContentType(contentType: string): string;
export function isDocker(forceReset: boolean): Promise<boolean>;
export function weightedAvg(arrValues: number[], arrWeights: number[]): number;
export function getMemoryInfo(): Promise<MemoryInfo>;
export function getFirstKey(dict: any): string | undefined;
export function getTypicalChromeExecutablePath(): string;
export function addTimeoutToPromise(promise: Promise<any>, timeoutMillis: number, errorMessage: string): Promise<any>;
export function isAtHome(): boolean;
export function sleep(millis: number): Promise<void>;
export function snakeCaseToCamelCase(snakeCaseStr: string): string;
export function printOutdatedSdkWarning(): void;
export function parseContentTypeFromResponse(response: IncomingMessage): {
    type: string;
    charset: string;
};
export function waitForRunToFinish(options: {
    actorId: string;
    runId: string;
    waitSecs?: string;
    token?: string;
}): Promise<ActorRun>;
export namespace publicUtils {
    export { isDocker };
    export { sleep };
    export { downloadListOfUrls };
    export { extractUrls };
    export { htmlToText };
    export { URL_NO_COMMAS_REGEX };
    export { URL_WITH_COMMAS_REGEX };
    export { createRequestDebugInfo };
    export { waitForRunToFinish };
}
/**
 * Describes memory usage of an Actor.
 */
export type MemoryInfo = {
    /**
     * Total memory available in the system or container
     */
    totalBytes: number;
    /**
     * Amount of free memory in the system or container
     */
    freeBytes: number;
    /**
     * Amount of memory used (= totalBytes - freeBytes)
     */
    usedBytes: number;
    /**
     * Amount of memory used the current Node.js process
     */
    mainProcessBytes: number;
    /**
     * Amount of memory used by child processes of the current Node.js process
     */
    childProcessesBytes: number;
};
import { IncomingMessage } from "http";
import { ActorRun } from "./typedefs";
declare function downloadListOfUrls(options: {
    url: string;
    encoding?: string;
    urlRegExp?: RegExp;
}): Promise<string[]>;
declare function extractUrls(options: {
    string: string;
    urlRegExp?: RegExp;
}): string[];
declare function htmlToText(html: string | cheerio.Root): string;
/**
 * Default regular expression to match URLs in a string that may be plain text, JSON, CSV or other. It supports common URL characters
 * and does not support URLs containing commas or spaces. The URLs also may contain Unicode letters (not symbols).
 * @memberOf utils
 */
declare const URL_NO_COMMAS_REGEX: RegExp;
/**
 * Regular expression that, in addition to the default regular expression `URL_NO_COMMAS_REGEX`, supports matching commas in URL path and query.
 * Note, however, that this may prevent parsing URLs from comma delimited lists, or the URLs may become malformed.
 * @memberOf utils
 */
declare const URL_WITH_COMMAS_REGEX: RegExp;
declare function createRequestDebugInfo(request: Request | RequestOptions, response?: any, additionalFields?: {
    [x: string]: any;
} | undefined): {
    [x: string]: any;
};
import Request from "./request";
import { RequestOptions } from "./request";
export {};
