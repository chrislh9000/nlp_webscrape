/// <reference types="node" />
export const FIREFOX_MOBILE_USER_AGENT: "Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0";
export const FIREFOX_DESKTOP_USER_AGENT: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0";
export function requestAsBrowser(options: RequestAsBrowserOptions): Promise<IncomingMessage & Readable & {
    body: string;
}>;
export type RequestAsBrowserResult = IncomingMessage & Readable & {
    body: string;
};
/**
 * [@apify/http-request](https://www.npmjs.com/package/@apify/http-request) NPM package.
 */
export type RequestAsBrowserOptions = {
    /**
     * URL of the target endpoint. Supports both HTTP and HTTPS schemes.
     */
    url: string;
    /**
     * HTTP method.
     */
    method?: string;
    /**
     * Additional HTTP headers to add. It's only recommended to use this option,
     * with headers that are typically added by websites, such as cookies. Overriding
     * default browser headers will remove the masking this function provides.
     */
    headers?: {
        [x: string]: string;
    };
    /**
     * An HTTP proxy to be passed down to the HTTP request. Supports proxy authentication with Basic Auth.
     */
    proxyUrl?: string;
    /**
     * Two-letter ISO 639 language code.
     */
    languageCode?: string;
    /**
     * Two-letter ISO 3166 country code.
     */
    countryCode?: string;
    /**
     * If `true`, the function uses User-Agent of a mobile browser.
     */
    useMobileVersion?: boolean;
    /**
     * If set to true, SSL/TLS certificate errors will be ignored.
     */
    ignoreSslErrors?: boolean;
    /**
     * Node.js' HTTP parser is stricter than parsers used by web browsers, which prevents scraping of websites
     * whose servers do not comply with HTTP specs, either by accident or due to some anti-scraping protections,
     * causing e.g. the `invalid header value char` error. The `useInsecureHttpParser` option forces
     * the HTTP parser to ignore certain errors which lets you scrape such websites.
     * However, it will also open your application to some security vulnerabilities,
     * although the risk should be negligible as these vulnerabilities mainly relate to server applications, not clients.
     * Learn more in this [blog post](https://snyk.io/blog/node-js-release-fixes-a-critical-http-security-vulnerability/).
     */
    useInsecureHttpParser?: boolean;
    /**
     * Function accepts `response` object as a single parameter and should return true or false.
     * If function returns true request gets aborted. This function is passed to the
     * [
     */
    abortFunction?: AbortFunction;
};
export type AbortFunction = (response: IncomingMessage) => boolean;
import { IncomingMessage } from "http";
import { Readable } from  "stream";
